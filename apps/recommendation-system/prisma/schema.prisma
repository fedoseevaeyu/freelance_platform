generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Freelancer @map("freelancer")
  Client     @map("client")
}

model User {
  id               String  @id @unique @default(cuid())
  email            String  @unique
  password         String
  name             String
  username         String  @unique
  country          String  @default("Россия")
  verified         Boolean @default(false)
  role             Role
  emailVerified    Boolean @default(false)
  profileCompleted Boolean @default(false)
  bio              String  @default("")
  avatarUrl        String  @default("")
  phone            String  @default("")

  services Service[]
  uploads  Uploads[]
  reviews  Review[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  jobPosts        JobPost[] @relation(name: "jobposts")
  claimedJobPosts JobPost[] @relation(name: "claimedjobposts")
  myOrders        Order[]   @relation(name: "clientsorders")
  orders          Order[]   @relation(name: "freelancersorders")
}

model Uploads {
  id        String   @id @unique @default(cuid())
  url       String
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @unique @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  slug      String    @unique
  services  Service[]
  jobPost   JobPost[]
}

model Tags {
  id        String    @id @unique @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  slug      String    @unique
  service   Service[]
  jobPost   JobPost[]
}

model Service {
  id           String   @id @unique @default(cuid())
  title        String
  description  String
  workExp      String
  technologies String
  skills       String
  slug         String   @unique
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  bannerImage  String
  images       String[]
  rating       Int      @default(0)
  ratedBy      Int      @default(0)

  tags      Tags[]
  package   Package[]
  features  Feature[]
  review    Review[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  orders    Order[]
  createdAt DateTime  @default(now())
}

model Package {
  id           String    @id @unique @default(cuid())
  name         String
  price        Int
  description  String?
  deliveryDays Int
  service      Service   @relation(fields: [serviceId], references: [id])
  features     Feature[]
  serviceId    String

  createdAt DateTime @default(now())
}

model Feature {
  id         String    @id @unique @default(cuid())
  name       String
  packages   Package[]
  includedIn String[]
  service    Service?  @relation(fields: [serviceId], references: [id])
  serviceId  String?

  createdAt DateTime @default(now())
}

model Review {
  id        String  @id @unique @default(cuid())
  ratedBy   User    @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  review    String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
}

model JobPost {
  id           String    @id @unique @default(cuid())
  title        String
  description  String
  slug         String    @unique
  category     Category  @relation(fields: [categoryId], references: [id])
  tags         Tags[]
  images       String[]
  budget       Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deadline     DateTime?
  user         User      @relation(fields: [userId], references: [id], name: "jobposts")
  userId       String
  categoryId   String
  claimed      Boolean   @default(false)
  claimedBy    User?     @relation(fields: [freelancerId], references: [id], name: "claimedjobposts")
  freelancerId String?
  orders       Order[]
}

enum OrderStatus {
  // Отклик
  Response
  // Принят отклик
  Accepted
  // Отклонен отклик
  Canceled
  // Выполнено
  Done
}

model Order {
  id String @id @unique @default(cuid())

  status OrderStatus

  jobPost   JobPost @relation(fields: [jobPostId], references: [id])
  jobPostId String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String

  client_agree Boolean @default(false)
  client       User    @relation(fields: [clientId], references: [id], name: "clientsorders")
  clientId     String

  freelancer_agree Boolean @default(false)
  freelancer       User    @relation(fields: [freelancerId], references: [id], name: "freelancersorders")
  freelancerId     String
}
